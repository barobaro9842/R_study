xlab = "Value", ylab = "Frequency", main = "Histogram of Data",
xlim = c(0, 60), ylim = c(0, 7))
hist(data, col = "magenta", border = "k",
xlab = "Value", ylab = "Frequency", main = "Histogram of Data",
xlim = c(0, 60), ylim = c(0, 7))
hist(data, col = "magenta", border = "white",
xlab = "Value", ylab = "Frequency", main = "Histogram of Data",
xlim = c(0, 60), ylim = c(0, 7))
hist(data, col = "magenta", border = "white",
xlab = "Value", ylab = "Frequency", main = "Histogram of Age",
xlim = c(0, 60), ylim = c(0, 7))
data(mycars)
data(mtcars)
pie(x)
data(mtcars)
x <- table(mtcars$gear)
pie(x)
pie(x, col=c("red", "blue", "green"))
View(mtcars)
x <-c(1,2,3,4,7,8,8,5,9,6,90)
stem(x)
x <-c(1,2,3,4,7,8,8,5,9,6,9)
stem(x)
x <-c(1,2,3,4,7,8,8,5,9,6,9, scale=2)
stem(x)
x <-c(1,2,3,4,7,8,8,5,9,6,9, scale=2)
stem(x)
x <-c(1,2,3,4,7,8,8,5,9,6,9, scale=5)
stem(x)
stem(x, scale=5)
stem(x, scale=2)
stem(x, scale=3)
x <- c(1,2,3,4,7,8,8,5,9,6,9)
stem(x, scale=3)
stem(x, scale=10)
stem(x, scale=100000)
stem(x, scale=1)
stem(x, scale=0.1)
stem(x, scale=0.2)
stem(x, scale=0.5)
stem(x, scale=0.10)
stem(x, scale=0.9)
stem(x, scale=0.8)
stem(x, scale=1)
data(iris)
pairs(iris)
pairs(mtcars)
?mtcars
pairs(mtcars)
pairs.panels(iris)
install.packages("dplyr")
library(dplyr)
## ::으로 라이브러리에 특정 함수만 가져올 수 있음
library(dplyr)
nrow(mtcary)
nrow(mtcars)
str(mtcars)
nrow(mtcars)
nrow(mtcars)
str(mtcars)
## 같은 함수의 이름이 다른 패키지에 있는 경우 ::로 특정할 수 있음
dplyr::filter()
filter(mtcars, cyl==4)
filter = dplyr::filter()
filter() = dplyr::filter()
filter = dplyr::filter
filter(mtcars, cyl==4) # dplyr 패키지 함수, mtcars에서 cyl==4인 행을 모두 추출
filter = dplyr::filter
filter(mtcars, cyl==4) # dplyr 패키지 함수, mtcars에서 cyl==4인 행을 모두 추출
dfilter = dplyr::filter
filter(mtcars, cyl==4) # dplyr 패키지 함수, mtcars에서 cyl==4인 행을 모두 추출
dfilter(mtcars, cyl==4) # dplyr 패키지 함수, mtcars에서 cyl==4인 행을 모두 추출
dfilter = dplyr::filter
dfilter(mtcars, cyl==4) # dplyr 패키지 함수, mtcars에서 cyl==4인 행을 모두 추출
#2가지 이상 조건(&연산자 활용)
dfilter(mtcars, cyl>=6 & mpg > 20)
head(select(mtcars, am, gear, cyl))
arrange(mtcars, am, gear, desc(cyl))
head(arrange(mtcars, am, gear, desc(cyl)))
head(arrange(mtcars, wt))
head(arrange(mtcars, mpg, desc(wt)))
head(mutate(mtcars, years="1974"))
head(mutate(mtcars, years="1974"))
head(mutate(mtcars, mpg_rank=rank(mgp))
head(mutate(mtcars, mpg_rank=rank(mgp)))
head(mutate(mtcars, mpg_rank=rank(mgp)))
head(mutate(mtcars, mpg_rank=rank(mpg)))
head(mutate(mtcars, mpg_rank=rank(mpg)))
distinct(mtcars, cyl)
distinct(mtcars, gear)
# 해당 변수에 대한 중복값을 모두 제거하고, 한개만 보여줌
mtcars
# 해당 변수에 대한 중복값을 모두 제거하고, 한개만 보여줌
distinct(mtcars, gear, cyl)
summarise(mtcars, cyl, mean)
summarise(mtcars, cyl, "mean")
summarise(mtcars, cly.mean = mean(cyl), cyl.min = min(cyl), cyl.max = max(cyl))
summarise(mtcars, cly.mean = mean(cyl), cyl.min = min(cyl), cyl.max = max(cyl))
# 데이터셋을 요약해서 보여줌
# summarise(ds, colname = 통계량(변수), colname = 통계량(변수), ... )
summarise(mtcars, mean(cyl), min(cyl),max(cyl))
gr_cyl = group_by(mtcars, cyl)
summarise(gr_cyl, n())
gr_cyl
gr_cyl = group_by(mtcars, cyl)
gr_cyl
summarise(gr_cyl, n())
summarise(gr_cyl, n())
gr_cyl
ls(mtcars)
ls(iris)
summarise(gr_cyl, n_distinct())
View(list1)
summarise(gr_cyl, n_distinct())
summarise(gr_cyl, n_distinct(gear))
summarise(gr_cyl, n_distinct(gear))
summarise(gr_cyl, n())
sample_n(mtcars, 10)
sample_n(mtcars, 10)
sample_n(mtcars, 10)
sample_n(mtcars, 10)
sample_frac(mtcars, 0.5)
sample_frac(mtcars, 0.2)
sample_frac(mtcars, 0.5)
group_by(mtcars, cly) %>% summarise(n())
group_by(mtcars, cly) %>% summarise(n())
group_by(mtcars, cyl) %>% summarise(n())
# 파이프 연산자 사용, 미사용 시
mp_rank <- mutate(mtcars, mpg_rank = rank(mpg))
arrange(mp_rank, mpg_rank)
# 파이프 연산자 사용 시
mutate(mtcars, mpg_rank = rank(mpg) %>% arrange(mpg_rank))
# 파이프 연산자 사용 시
mutate(mtcars, mpg_rank = rank(mpg)) %>% arrange(mpg_rank)
library(readxl)
exdata1
library(readxl)
exdata1 <- read_excel("./Source/Sample1.xlsx")
exdata1
View(exdata1)
exdata1 %>% select(ID)
select(exdata1, ID)
exdata1 %>% select(ID, AREA, Y21_CNT)
# 특정 데이터 제외하고 추출
exdata1 %>% select(-AREA)
# AREA 제외하고 나머지 컬럼 가져오기
exdata1
# 특정 데이터 제외하고 추출
exdata1 %>% select(-AREA) %>% group_by(SEX)
# 특정 데이터 제외하고 추출
exdata1 %>% select(-AREA) %>% group_by(SEX) %>% summarise(n())
# AREA 제외하고 나머지 컬럼 가져오기
exdata1 %>% select(-AREA, -Y21_CNT) %>% group_by(SEX) %>% summarise(n())
# AREA 제외하고 나머지 컬럼 가져오기
exdata1 %>% select(-AREA, -Y21_CNT) %>% group_by(Y21_CNT) %>% summarise(n())
# AREA 제외하고 나머지 컬럼 가져오기
exdata1 %>% select(-AREA, -Y21_CNT) %>% group_by(Y20F_AMT) %>% summarise(mean())
# AREA 제외하고 나머지 컬럼 가져오기
exdata1 %>% select(-AREA, -Y21_CNT) %>% group_by(SEX) %>% summarise(mean(Y20_AMT))
exdata1 %>% filter(AREA == "서울")
exdata1 %>% filter(AREA == "서울") %>% select(-AREA)
exdata1 %>% filter(AREA == "서울") %>% select(AREA)
exdata1 %>% filter(AREA == "서울") %>% select(-AREA)
exdata1 %>% filter(AREA == "서울" & Y21_CNT >= 10) %>% select(-AREA)
exdata1 %>% arrange(AGE)
exdata1 %>% arrange(AGE)
exdata1 %>% arrange(desc(Y20_AMT))
exdata1 %>% arrange(desc(Y20_AMT))
exdata1 %>% arrange(AGE, desc(Y21_AMT))
exdata1 %>% arrange(AGE) %>% arrange(desc(Y21_AMT))
exdata1 %>% arrange(AGE, desc(Y21_AMT))
exdata1 %>% arrange(AGE) %>% arrange(desc(Y21_AMT))
exdata1 %>% arrange(AGE, desc(Y21_AMT))
exdata1 %>% arrange(AGE) %>% arrange(desc(Y21_AMT))
exdata1 %>% arrange(AGE, desc(Y21_AMT))
exdata1 %>% arrange(AGE, desc(Y21_AMT))
exdata1 %>% arrange(AGE) %>% arrange(desc(Y21_AMT))
exdata1 %>% arrange(AGE, desc(Y21_AMT))
exdata1 %>% arrange(AGE) %>% arrange(desc(Y21_AMT))
exdata1 %>% arrange(AGE, desc(Y21_AMT))
exdata1 %>% arrange(AGE) %>% arrange(desc(Y21_AMT))
exdata1 %>% arrange(AGE, desc(Y21_AMT))
exdata1 %>% arrange(AGE) %>% arrange(desc(Y21_AMT))
exdata %>% summarise(TOT_Y21_AMT = sum(Y21_AMT))
exdata %>% summarise(TOT_Y21_AMT = sum(Y21_AMT))
exdata1 %>% summarise(TOT_Y21_AMT = sum(Y21_AMT))
library(readxl)
m_history <- read_excel("./Source/Sample2_m_history.xlsx")
f_history <- read_excel("./Source/Sample2_f_history.xlsx")
View(m_history)
f_history <- read_excel("./Source/Sample3_f_history.xlsx")
View(m_history)
View(f_history)
exdata_bindjoin <- bind_rows(m_history, f_history)
View(exdata_bindjoin)
exdata_bindjoin <- bind_rows(m_history, f_history)
View(exdata_bindjoin)
# 데이터 결합하기(세로)
exdata_bindjoin <- bind_rows(m_history, f_history)
# 데이터 결합하기(세로)
exdata_bindjoin <- bind_row(m_history, f_history)
# 데이터 결합하기(세로)
library(dplyt)
# 데이터 결합하기(세로)
library(dplyr)
exdata_bindjoin <- bind_row(m_history, f_history)
View(exdata_bindjoin)
# 데이터 결합하기(세로)
library(dplyr)
exdata_bindjoin <- bind_row(m_history, f_history)
exdata_bindjoin <- bind_rows(m_history, f_history)
View(exdata_bindjoin)
View(exdata_bindjoin)
_join(m_history, f_history, by="AREA")
exdata_leftjoin = left_join(m_history, f_history, by="AREA")
# inner : 두 테이블에 모두 있는 데이터만 결합
exdata_innerjoin = inner_join(m_history, f_history, by="AREA")
# full : 두 테이블에 모두 있는 데이터를 결합
exdata_fulljoin = full_join(m_history, f_history, by="AREA")
jeju_y21_history <- read_excel("./Source/Sample4_y21_history.xlsx")
jeju_y21_history <- read_excel("./Source/Sample5_y20_history.xlsx")
jeju_y21_history
# 데이터 결합하기(가로) # left_join, inner_join, full_join
jeju_y21_history <- read_excel("./Source/Sample4_y21_history.xlsx")
jeju_y20_history <- read_excel("./Source/Sample5_y20_history.xlsx")
jeju_y21_history
jeju_y20_history
# 데이터 결합하기(가로) # left_join, inner_join, full_join
jeju_y21_history <- read_excel("./Source/Sample4_y21_history.xlsx")
jeju_y20_history <- read_excel("./Source/Sample5_y20_history.xlsx")
jeju_y21_history
jeju_y20_history
# left : table1 기준으로 결합
exdata_leftjoin = left_join(jeju_y20_history, jeju_y21_history, by="ID")
exdata_leftjoin
# left : table1 기준으로 결합
exdata_leftjoin = left_join(jeju_y20_history, jeju_y21_history, by="ID")
exdata_leftjoin
# left : table1 기준으로 결합
exdata_leftjoin = left_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_leftjoin
# inner : 두 테이블에 모두 있는 데이터만 결합
exdata_innerjoin = inner_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_innerjoin
# inner : 두 테이블에 모두 있는 데이터만 결합
exdata_innerjoin = inner_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_innerjoin
# full : 두 테이블에 모두 있는 데이터를 결합
exdata_fulljoin = full_join(jeju_y21_history, jeju_y20_history, by="AREA")
exdata_fulljoin
# full : 두 테이블에 모두 있는 데이터를 결합
exdata_fulljoin = full_join(jeju_y21_history, jeju_y20_history, by="AREA")
exdata_fulljoin
# inner : 두 테이블에 모두 있는 데이터만 결합
exdata_innerjoin = inner_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_innerjoin
# full : 두 테이블에 모두 있는 데이터를 결합
exdata_fulljoin = full_join(jeju_y21_history, jeju_y20_history, by="AREA")
exdata_fulljoin
# full : 두 테이블에 모두 있는 데이터를 결합
exdata_fulljoin = full_join(jeju_y21_history, jeju_y20_history, by="AREA")
# full : 두 테이블에 모두 있는 데이터를 결합
exdata_fulljoin = full_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_fulljoin
# full : 두 테이블에 모두 있는 데이터를 결합
exdata_fulljoin = full_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_fulljoin
View(jeju_y21_history)
#####################5-3데이터 구조 변환######################
library(reshape2)
#####################5-3데이터 구조 변환######################
library(reshape)
#####################5-3데이터 구조 변환######################
install.packages("reshape")
#####################5-3데이터 구조 변환######################
library(reshape)
#####################5-3데이터 구조 변환######################
library(reshape)
#####################5-3데이터 구조 변환######################
install.packages("reshapes")
#####################5-3데이터 구조 변환######################
install.packages("reshape2")
library(reshape2)
library(reshape2)
detach("package:reshape", unload = TRUE)
remove.packages("reshape")
airquality
head(airquality)
names(airquality)
names(airquality) <- tolower(names(airquality))
airquality
names(airquality)
ls(airquality)
# column name을 소문자로 변경
airquality
# column name을 소문자로 변경
head(airquality)
head(melt)
melt_test = melt(airquality)
head(melt)
melt_test = melt(airquality)
head(melt_test)
str(melt_test)
str(airquality)
View(melt_test)
melt_test_2 = melt(airquality, id.vars = c("month", "wind"), measure.vars = "ozone")
head(melt_test2)
melt_test_2 = melt(airquality, id.vars = c("month", "wind"), measure.vars = "ozone")
head(melt_test_2)
str(melt_test_2)
head(aq_melt)
# cast : 행열을 변환
aq_melt <- melt(airquality, id.vars = c("month", "day"), na.rm = TRUE)
head(aq_melt)
aq_dcast <- dcast(aq_melt, month + day ~ variable)
head(aq_dcast)
View(aq_melt)
# acast 함수 : 벡터, 행렬, 배열로 변환
acast(aq_melt, day~month~variable)
# acast 함수 : 벡터, 행렬, 배열로 변환
head(acast(aq_melt, day~month~variable))
# acast 함수 : 벡터, 행렬, 배열로 변환
head(acast(aq_melt, month+day~month~variable)) #행~열~변수#
# acast 함수 : 벡터, 행렬, 배열로 변환
head(acast(aq_melt, day~month~variable)) #행~열~변수#
head(acast(aq_melt, month~variable, mean))
head(acast(aq_melt, month~variable, sum))
head(acast(aq_melt, month~variable, length))
# 데이터 결합하기(세로) # dplyr::bind_rows
library(dplyr)
exdata_bindjoin <- bind_rows(m_history, f_history)
# 데이터 결합하기(세로) # dplyr::bind_rows
library(dplyr)
# 데이터 결합하기(세로) # dplyr::bind_rows
library(dplyr)
exdata_bindjoin <- bind_rows(m_history, f_history)
# 데이터 결합하기(세로) # dplyr::bind_rows
library(dplyr)
exdata_bindjoin <- bind_rows(m_history, f_history)
View(exdata_bindjoin)
# 데이터 결합하기(가로) # left_join, inner_join, full_join
jeju_y21_history <- read_excel("./Source/Sample4_y21_history.xlsx")
jeju_y20_history <- read_excel("./Source/Sample5_y20_history.xlsx")
jeju_y21_history
# 데이터 결합하기(가로) # left_join, inner_join, full_join
jeju_y21_history <- read_excel("./Source/Sample4_y21_history.xlsx")
jeju_y20_history <- read_excel("./Source/Sample5_y20_history.xlsx")
jeju_y21_history
# 데이터 결합하기(가로) # left_join, inner_join, full_join
jeju_y21_history <- read_excel("./Source/Sample4_y21_history.xlsx")
#### 데이터 결합
library(readxl)
# 데이터 결합하기(가로) # left_join, inner_join, full_join
jeju_y21_history <- read_excel("./Source/Sample4_y21_history.xlsx")
jeju_y20_history <- read_excel("./Source/Sample5_y20_history.xlsx")
jeju_y21_history
jeju_y20_history
# left : table1 기준으로 결합
exdata_leftjoin = left_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_leftjoin
# inner : 두 테이블에 모두 있는 데이터만 결합
exdata_innerjoin = inner_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_innerjoin
# full : 두 테이블에 모두 있는 데이터를 결합
exdata_fulljoin = full_join(jeju_y21_history, jeju_y20_history, by="ID")
exdata_fulljoin
############################5-3데이터 구조 변환################################
install.packages("reshape2")
library(reshape2)
head(airquality)
# column name을 소문자로 변경
names(airquality) <- tolower(names(airquality))
ls(airquality)
# melt 데이터 모양 변경
melt_test = melt(airquality)
head(melt_test)
str(airquality) # 153 obs with 6variables
str(melt_test) # 918 obs with 2 variables
View(melt_test)
str(melt_test_2)
head(melt_test_2)
# cast : 세로로 긴 데이터의 내용을 컬럼데이터로 변환
aq_melt <- melt(airquality, id.vars = c("month", "day"), na.rm = TRUE)
head(aq_melt)
aq_dcast <- dcast(aq_melt, month + day ~ variable)
# month + day는 식별자
# ~ variable은 나머지 변수 의미
head(aq_dcast)
# acast 함수 : 벡터, 행렬, 배열로 변환
head(acast(aq_melt, day~month~variable)) #행~열~변수 #변수별 행렬로 변환
head(acast(aq_melt, month~variable, mean)) #행~열, 요약 # 요약값 행렬
head(acast(aq_melt, month~variable, sum))
head(acast(aq_melt, month~variable, length))
################################5-4 데이터 정제하기######################
x <-  c(1,2,NA,4,5)
x
is.na(x)
table(is.na(x))
sum(x)
sum(x, na.rm=T)
library(numpy)
install.packages(numpy)
install.packages("numpy")
sum(is.na(x)) # 결측치 개수 파악하는 방법
colSums(is.na(x))
colSums(is.na(airquality))
is.na(airquality)
is.na(airquality)
colSums(is.na(airquality)) # colSums : 컬럼별로 Sum함수 적용
na.omit(x)
x
na.omit(x)
data("airquality")
data("airquality")
na.omit(airquality)
str(na.omit(airquality))
na.omit(airquality)
airquality[is.na(airquality)]
airquality[is.na(airquality)] <- 0
colSums(is.na(airquality))
sum(na.omit(airquality))
sum(is.na(na.omit(airquality)))
boxplot(mtcars$wt)
boxplot(mtcars$wt)$stats
mtcars$wt <- ifelse(mtcars$wt, 5.25, NA, mtcars$wt)
mtcars$wt <- ifelse(mtcars$wt, 5.25, NA, mtcars$wt)
mtcars
mtcars$wt <- ifelse(mtcars$wt, 5.25, NA, mtcars$wt)
mtcars
mtcars$wt <- ifelse(mtcars$wt > 5.25, NA, mtcars$wt)
matcars$wt
mtcars$wt
data(mtcars)
mtcars
mtcars$wt
mtcars$wt <- ifelse(mtcars$wt > 5.25, NA, mtcars$wt)
mtcars$wt
table(mtcars)
air_narm
#
air_narm = airquality(!is.na(airquality$Ozone), )
air_narm
#
air_narm = airquality[!is.na(airquality$Ozone), ]
air_narm
colSums(air_narm)
#
air_narm = airquality[!is.na(airquality$Ozone), ]
colSums(is.na(air_narm))
table(is.na(airquality))
table(!is.na(airquality))
# 최저 경계, 1사분위수, 중앙값, 3사분위수, 최고 경계 5개 값 순으로 출력
data(airquality)
air_narm1 = na.omit(airquality)
mean(air_narm1$Ozone)
mean(airquality)
mean(airquality$Ozone)
mean(airquality$Ozone, na.rm = T)
mean(air_narm1$Ozone)
mean(air_narm1$Ozone)
mean(airquality$Ozone, na.rm = T)
# 이상값이 포함된 환자 데이터
partients = data.frame(name = c("환자1", "환자2", "환자3", "환자4", "환자5"), age=c(22,20,25,30,27),
gender = factor(c("M","F","M","K","F")), blood.type=factor(c("A","O","B","AB","C")))
partients
air_narm1
mode(air_narm1)
str(air_narm1)
dim(air_narm1)
dim(airquality)
partients
partients_outrm = partients[parents$gender == "M" | partients$gender =="F",]
partients_outrm
partients_outrm = partients[parents$gender == "M" | partients$gender =="F",]
partients_outrm
partients_outrm = partients[partients$gender == "M" | partients$gender =="F",]
partients_outrm
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
partients
#데이터 대체
partients = data.frame(name = c("환자1", "환자2", "환자3", "환자4", "환자5"), age=c(22,20,25,30,27),
gender = factor(c(1,2,1,3,2)), blood.type=factor(c(1,2,3,4,5)))
partients
partients$gender = ifelse(partients$gender < 1 | partients$gender > 2, NA, partients$gender)
#데이터 대체
partients = data.frame(name = c("환자1", "환자2", "환자3", "환자4", "환자5"), age=c(22,20,25,30,27),
gender = c(1,2,1,3,2), blood.type=c(1,2,3,4,5))
partients$gender = ifelse(partients$gender < 1 | partients$gender > 2, NA, partients$gender)
partients
partients[!is.na(partients$gender)&!is.na(partients$blood.type)]
partients
partients[!is.na(partients$gender)&!is.na(partients$blood.type),]
partients[!is.na(partients$gender)&!is.na(partients$blood.type),]
boxplot(partients)
# boxplot
boxplot(airquality[,c(1:4)])
boxplot(airquality[,1]$stats)
boxplot(airquality[,1])$stats
# boxplot
boxplot(airquality[,c(1:4)])
boxplot(airquality[,1])$stats
# boxplot
boxplot(airquality[,c(1:4)])
boxplot(airquality[,1])$stats
# boxplot
boxplot(airquality[,c(1:4)])
